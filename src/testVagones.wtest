import vagones.*
describe "Vagones" {
	const pasajero_1 = new Pasajero(ancho=2, largo=10, tieneBanios=true)
	const pasajero_2 = new Pasajero(ancho=4, largo=7, tieneBanios=false)
	const carga_1 = new Carga(cargaMaximaIdeal=8000 , maderasSueltas=5)
	const carga_2 = new Carga(cargaMaximaIdeal=8000 , maderasSueltas=2)
	const dormitorio_1= new Dormitorio(cantidadCompartimientos=12, camasPorCompartimiento=4)
	
	method initialize(){
		pasajero_2.estaOrdenado(false)
	}
	
	test "cantidad maxima de Pasajeros" {
		assert.equals(80, pasajero_1.cantidadDePasajeros())
		assert.equals(70-15, pasajero_2.cantidadDePasajeros())
		assert.equals(0, carga_1.cantidadDePasajeros())
		assert.equals(48, dormitorio_1.cantidadDePasajeros())
	}
	
	test "peso maximo" {
		assert.equals(2000 + 80 * 80 + 300, pasajero_1.pesoMaximo())
		assert.equals(2000 + 80 * 55 + 800, pasajero_2.pesoMaximo())
		assert.equals(7500, carga_1.pesoMaximo())
		assert.equals(7200 + 1500, carga_2.pesoMaximo())
		assert.equals(4000 + 80 * 48 + 1200, dormitorio_1.pesoMaximo())	
	}
	
	test "Carga puede transportar" {	
		assert.equals(300, pasajero_1.carga())
		assert.equals(800, pasajero_2.carga())
		assert.equals(6000, carga_1.carga())
		assert.equals(7200, carga_2.carga())
		assert.equals(1200, dormitorio_1.carga())
	}
	
	test "tiene Banios" {
		assert.that(pasajero_1.tieneBanios())
		assert.notThat(pasajero_2.tieneBanios())
		assert.notThat(carga_1.tieneBanios())
		assert.that(dormitorio_1.tieneBanios())		
	}
	
	
	
}